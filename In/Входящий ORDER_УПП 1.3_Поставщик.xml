<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ТипТранзакции</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Входящий ORDER</Value>
		<Value xsi:type="xs:string">Заказы покупателей (ORDER)</Value>
		<Value xsi:nil="true"/>
		<Value xsi:nil="true"/>
		<Value xsi:nil="true"/>
		<Value xsi:type="xs:string">//ВыполнитьГибкиеНастройки(Приемник,,, ЛогСобытий); 

Если Приемник.xmlВалюта = "RUB" Тогда
	Валюта = Справочники.Валюты.НайтиПоКоду(643);
ИначеЕсли Приемник.xmlВалюта = "UAH" Тогда
	Валюта = Справочники.Валюты.НайтиПоКоду(980);
ИначеЕсли Приемник.xmlВалюта = "USD" Тогда
	Валюта = Справочники.Валюты.НайтиПоКоду(840);
ИначеЕсли Приемник.xmlВалюта = "EUR" Тогда
	Валюта = Справочники.Валюты.НайтиПоКоду(978);
ИначеЕсли Приемник.xmlВалюта = "MDL" Тогда
	Валюта = Справочники.Валюты.НайтиПоКоду(498);
ИначеЕсли Приемник.xmlВалюта = "BYR" Тогда
	Валюта = Справочники.Валюты.НайтиПоКоду(974);
ИначеЕсли Приемник.xmlВалюта = "KZT" Тогда
	Валюта = Справочники.Валюты.НайтиПоКоду(398);
Иначе
	Валюта = Справочники.Валюты.НайтиПоКоду(643);
КонецЕсли;

Приемник.Валюта = Валюта;

Если ВРег(Приемник.ТипДокумента) = "D"
	ИЛИ ВРег(Приемник.ТипДокумента) = "R" Тогда
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Заказ_События.Документ КАК Заказ,
	               |	Накладная_События.Документ КАК Накладная,
	               |	ЭКОМ_GLN.Контрагент_ЦеныИз1С
	               |ИЗ
	               |	РегистрСведений.DR_ЦепочкиДокументов КАК DR_ЦепочкиДокументов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Заказ_События
	               |		ПО DR_ЦепочкиДокументов.ИдентификаторЦепочки = Заказ_События.ИдентификаторЦепочки
	               |			И (Заказ_События.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ЭКОМ_ВидыДокументов.Заказ_Входящий))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Накладная_События
	               |		ПО DR_ЦепочкиДокументов.ИдентификаторЦепочки = Накладная_События.ИдентификаторЦепочки
	               |			И (Накладная_События.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ЭКОМ_ВидыДокументов.Накладная_Исходящая))
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_GLN КАК ЭКОМ_GLN
	               |		ПО DR_ЦепочкиДокументов.Контрагент = ЭКОМ_GLN.Объект
	               |ГДЕ
	               |	DR_ЦепочкиДокументов.ИдентификаторЦепочки = &amp;ИдентификаторЦепочки";
	
	Запрос.УстановитьПараметр("ИдентификаторЦепочки", Приемник.ИдентификаторЦепочки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Заказ_События.Документ КАК Заказ,
			|	Накладная_События.Документ КАК Накладная,
			|	ЭКОМ_GLN.Контрагент_ЦеныИз1С КАК ЦеныИз1С
			|ИЗ
			|	Документ.ЭКОМ_Документы КАК ЭКОМ_Документы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Заказ_События
			|		ПО ЭКОМ_Документы.ИдентификаторЦепочки = Заказ_События.ИдентификаторЦепочки
			|			И (Заказ_События.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ЭКОМ_ВидыДокументов.Заказ_Входящий))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Накладная_События
			|		ПО ЭКОМ_Документы.ИдентификаторЦепочки = Накладная_События.ИдентификаторЦепочки
			|			И (Накладная_События.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ЭКОМ_ВидыДокументов.Накладная_Исходящая))
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_GLN КАК ЭКОМ_GLN
			|		ПО ЭКОМ_Документы.Контрагент = ЭКОМ_GLN.Объект
			|ГДЕ
			|	ЭКОМ_Документы.ЗаказДата &gt;= ДОБАВИТЬКДАТЕ(&amp;ORDERDATE, МЕСЯЦ, -1)
			|	И ЭКОМ_Документы.Организация = &amp;Организация
			|	И ЭКОМ_Документы.Контрагент = &amp;Контрагент
			|	И ЭКОМ_Документы.ТочкаДоставки = &amp;ТочкаДоставки
			|	И ЭКОМ_Документы.ЗаказНомер = &amp;ORDERNUMBER";
				
		Запрос.УстановитьПараметр("ORDERDATE", 		Приемник.ЗаказДата);
		Запрос.УстановитьПараметр("ORDERNUMBER", 	Приемник.ЗаказНомер);
		Запрос.УстановитьПараметр("Контрагент", 	Приемник.Контрагент);
		Запрос.УстановитьПараметр("Организация", 	Приемник.Организация);
		Запрос.УстановитьПараметр("ТочкаДоставки", 	Приемник.ТочкаДоставки);
		
		РезультатЗапроса	= Запрос.Выполнить();
		
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выбрать();
	
	Если ВРег(Приемник.ТипДокумента) = "D" Тогда

		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Заказ) Тогда
				ЗаказОбъект = ВыборкаДетальныеЗаписи.Заказ.ПолучитьОбъект();
		        ЗаказОбъект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ВРег(Приемник.ТипДокумента) = "R" Тогда

		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			
			ДокументСсылка = Неопределено;
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Заказ) Тогда
				ДокументСсылка = ВыборкаДетальныеЗаписи.Заказ;
			ИначеЕсли ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Накладная) Тогда
				ДокументСсылка = ВыборкаДетальныеЗаписи.Накладная;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументСсылка) Тогда	
				мВалютаРегламентированногоУчета 	= глЗначениеПеременной("ВалютаРегламентированногоУчета");
				ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		        ДокументОбъект.Товары.Очистить();
				
		        Для Каждого СтрокаТЧ Из Приемник.ТЧ_Товары Цикл
					СтрокаТабличнойЧасти = ДокументОбъект.Товары.Добавить();
					// Заполнение данных строки.
			        ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ, "Номенклатура, ЕдиницаИзмерения");
					СтрокаТабличнойЧасти.Количество 	= СтрокаТЧ.КоличествоПоставляемое;
					СтрокаТабличнойЧасти.Коэффициент 	= СтрокаТЧ.ЕдиницаИзмерения.Коэффициент;
					ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, "Реализация");
					Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
						СтрокаТабличнойЧасти.Размещение	= ДокументОбъект.СкладГруппа;
					КонецЕсли;
					
					Если ВыборкаДетальныеЗаписи.ЦеныИз1С Тогда
						ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета);
					Иначе
						Цена = 0;
				        Если ДокументОбъект.СуммаВключаетНДС И ЗначениеЗаполнено(СтрокаТЧ.ЦенаСНДС) Тогда
				            Цена = СтрокаТЧ.ЦенаСНДС;
				        ИначеЕсли НЕ ДокументОбъект.СуммаВключаетНДС И ЗначениеЗаполнено(СтрокаТЧ.Цена) Тогда
				            Цена = СтрокаТЧ.Цена;
				        ИначеЕсли ДокументОбъект.СуммаВключаетНДС И ЗначениеЗаполнено(СтрокаТЧ.Цена) Тогда
				            Цена  = Окр((СтрокаТЧ.Цена * (100 + СтавкаНДСЧислом(СтрокаТабличнойЧасти.СтавкаНДС))) / 100 , 4);
				        ИначеЕсли НЕ ДокументОбъект.СуммаВключаетНДС И ЗначениеЗаполнено(СтрокаТЧ.ЦенаСНДС) Тогда
				            Цена = Окр((СтрокаТЧ.ЦенаСНДС * 100) / (100 + СтавкаНДСЧислом(СтрокаТабличнойЧасти.СтавкаНДС)) , 4);
				        КонецЕсли;
				        СтрокаТабличнойЧасти.Цена = Цена;
					КонецЕсли;
					
					ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
					// Рассчитываем плановую себестоимость.
					ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета);
		        КонецЦикла;    

		        ДокументОбъект.Записать(?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
КонецЕсли;

Если Приемник.НеЗагружатьДокумент = Ложь Тогда
	Приемник.Проведен = Истина;
	Приемник.ПометкаУдаления = Ложь;
КонецЕсли;</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">3</lastId>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Заказы покупателей (ORDER)</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">ЭТРН</value>
				<id xsi:type="xs:decimal">3</id>
			</item>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">4</id>
			</item>
		</Value>
	</row>
</ValueTree>